// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using day1.Models;

namespace day1.Migrations
{
    [DbContext(typeof(DBModel))]
    [Migration("20210420070933_db5")]
    partial class db5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("day1.Models.Course", b =>
                {
                    b.Property<int>("crsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("crsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("crsId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("day1.Models.Department", b =>
                {
                    b.Property<int>("deptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("deptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deptId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("day1.Models.DepartmentCourse", b =>
                {
                    b.Property<int>("deptId")
                        .HasColumnType("int");

                    b.Property<int>("crsId")
                        .HasColumnType("int");

                    b.HasKey("deptId", "crsId");

                    b.HasIndex("crsId");

                    b.ToTable("DepartmentCourses");
                });

            modelBuilder.Entity("day1.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("deptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("deptId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("day1.Models.StudentCourse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("crsId")
                        .HasColumnType("int");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.HasKey("Id", "crsId");

                    b.HasIndex("crsId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("day1.Models.DepartmentCourse", b =>
                {
                    b.HasOne("day1.Models.Course", "Course")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("crsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("day1.Models.Department", "Department")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("deptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("day1.Models.Student", b =>
                {
                    b.HasOne("day1.Models.Department", "department")
                        .WithMany("students")
                        .HasForeignKey("deptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("day1.Models.StudentCourse", b =>
                {
                    b.HasOne("day1.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("day1.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("crsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("day1.Models.Course", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("day1.Models.Department", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("students");
                });

            modelBuilder.Entity("day1.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
